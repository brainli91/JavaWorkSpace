package com.fdmgroup.model;

import java.util.HashSet;
import java.util.Set;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;
import javax.persistence.ManyToOne;
import javax.persistence.NamedQueries;
import javax.persistence.NamedQuery;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.persistence.SequenceGenerator;
import javax.persistence.Table;
import javax.persistence.Transient;
import javax.validation.constraints.Size;

@Entity
@Table(name = "ER_USERS")
@NamedQueries({ @NamedQuery(name = "user.findAll", query = "SELECT u FROM User u"),
    @NamedQuery(name = "user.findByEmail", query = "SELECT u FROM User u WHERE u.email = :email"),
    @NamedQuery(name = "user.findByFirstName", query = "SELECT u FROM User u WHERE u.firstName LIKE :firstName"),
    @NamedQuery(name = "user.findByLastName", query = "SELECT u FROM User u WHERE u.lastName LIKE :lastName"),
    @NamedQuery(name = "user.findBlocked", query = "SELECT u FROM User u WHERE u.blocked = 1"),
    @NamedQuery(name = "user.findActive", query = "SELECT u FROM User u WHERE u.active = 1") })
public class User implements IStorable {

  @Id
  @Column(name = "user_id", nullable = false)
  @SequenceGenerator(name = "er_user_sequence", sequenceName = "ER_USERS_SEQ", allocationSize = 1)
  @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "er_user_sequence")
  private long id;

  @Column(name = "email", nullable = false, length = 32)
  private String email;

  @Column(name = "pw", nullable = false)
  private String password;

  @Column(name = "first_name", nullable = false, length = 32)
  private String firstName;

  @Column(name = "last_name", nullable = false, length = 32)
  private String lastName;

  @Column(name = "blocked")
  private int blocked;

  @Column(name = "active")
  private int active;

  @ManyToOne(fetch = FetchType.LAZY, cascade = CascadeType.ALL)
  private Role role;

  @OneToOne(mappedBy = "user")
  private ApplicantProfile applicantProfile;

  @OneToMany(mappedBy = "jobPoster")
  private Set<Job> createdJobs; // one recruiter can have many jobs they
  // created.


  @OneToMany(mappedBy = "applicant")
  private Set<JobApplication> jobApplications;
  
  @Transient
  private String fullName;

  public User() {
    this(null, null, null, null, null);
  }

  public User(String email, String password, String firstName, String lastName, Role role) {
    super();
    this.email = email;
    this.password = password;
    this.firstName = firstName;
    this.lastName = lastName;
    this.blocked = 0;
    this.active = 1;
    this.role = role;
    this.applicantProfile = null;
    this.createdJobs = new HashSet<>();
    this.jobApplications = new HashSet<>();
  }

  public long getId() {
    return id;
  }

  public void setId(long id) {
    this.id = id;
  }

  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }

  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }

  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }

  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }

  public int getBlocked() {
    return blocked;
  }

  public void setBlocked(int blocked) {
    this.blocked = blocked;
  }

  public int getActive() {
    return active;
  }

  public void setActive(int active) {
    this.active = active;
  }

  public Role getRole() {
    return role;
  }

  public void setRole(Role role) {
    this.role = role;
  }

  public ApplicantProfile getApplicantProfile() {
    return applicantProfile;
  }

  public void setApplicantProfile(ApplicantProfile applicantProfile) {
    this.applicantProfile = applicantProfile;
  }

  public Set<Job> getCreatedJobs() {
    return createdJobs;
  }

  public void setCreatedJobs(Set<Job> createdJobs) {
    this.createdJobs = createdJobs;
  }

  public Set<JobApplication> getJobApplications() {
    return jobApplications;
  }

  public void setJobApplications(Set<JobApplication> jobApplications) {
    this.jobApplications = jobApplications;
  }

  public boolean isActive() {
    return getActive() != 0;
  }

  public boolean isBlocked() {
    return getBlocked() != 0;
  }
  
  public String getFullName() {
	return firstName + " " + lastName;
  }

@Override
  public int hashCode() {
    final int prime = 31;
    int result = 1;
    result = prime * result + (int) (id ^ (id >>> 32));
    return result;
  }

  @Override
  public boolean equals(Object obj) {
    if (this == obj)
      return true;
    if (obj == null)
      return false;
    if (getClass() != obj.getClass())
      return false;
    User other = (User) obj;
    if (id != other.id)
      return false;
    return true;
  }

  /*
   * toString is used for logging the user info
   * Make sure password is not displayed if you re-generate toString automatically
   * -Sammy
   */
  @Override
  public String toString() {
    return "User: [DatabaseId=" + id + ", username/email=" + email + ", firstName=" + firstName + ", lastName="
        + lastName + ", blocked=" + blocked + ", active=" + active + ", role=" + role + "]";
  }

}
