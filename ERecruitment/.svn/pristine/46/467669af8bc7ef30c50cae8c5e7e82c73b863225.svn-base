package com.fdmgroup.controller;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.ListIterator;
import java.util.Set;

import org.junit.runner.Request;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;

import com.fdmgroup.dao.InterviewDAO;
import com.fdmgroup.dao.JobApplicationDAO;
import com.fdmgroup.dao.JobDAO;
import com.fdmgroup.dao.UserDAO;
import com.fdmgroup.model.Interview;
import com.fdmgroup.model.InterviewResult;
import com.fdmgroup.model.Job;
import com.fdmgroup.model.JobApplication;
import com.fdmgroup.model.JobStatus;
import com.fdmgroup.model.User;

@Controller
@SessionAttributes(names = {"user"}, types = { User.class})
public class ApplicantController {

	@Autowired
	JobDAO jobDAO;
	
	@Autowired
	UserDAO userDAO;
	
	@Autowired
	InterviewDAO interviewDAO;
	
	@Autowired
	JobApplicationDAO jobAppDAO;
	
	@RequestMapping(value = "/applicantDashboard", method = RequestMethod.GET)
	public String loadApplicantDashboard(Model model, @ModelAttribute User user) {
		List<Job> topFiveJobs = null;
		List<Interview> topFiveInterviews = null;
		List<Job> jobs = jobDAO.findAll();
		User applicant = userDAO.read(user.getId());
		Set<JobApplication> jobApps = userDAO.read(user.getId()).getJobApplications();
		List<Interview> interviews = interviewDAO.findUserInterviews(applicant);
		int jobCount = 5;
		int interviewCount = 5;
		
		if(!(jobs==null)){
			topFiveJobs = new ArrayList<>();
			Collections.reverse(jobs);
			Iterator<Job> jobIter = jobs.iterator();
			while(jobIter.hasNext() && jobCount > 0) {
				Job job = jobIter.next();
				if(job.getStatus().equals(JobStatus.ACTIVE) && !jobApps.contains(job)) {
					topFiveJobs.add(job);
					jobCount--;
				}
			}
		}
		
		if(!(interviews==null)){
			topFiveInterviews = new ArrayList<>();
			Collections.reverse(interviews);
			Iterator<Interview>interviewIter =  interviews.iterator();
			while(interviewIter.hasNext() && interviewCount > 0) {
				Interview interview = interviewIter.next();
				if(interview.getResult().equals(InterviewResult.PENDING)) {
					topFiveInterviews.add(interview);
					interviewCount--;
				}
			}
		}
		
		model.addAttribute("jobs", topFiveJobs);
		model.addAttribute("interviews", topFiveInterviews);
		
		return "applicant_dashboard";
	}
	
	@RequestMapping(value = "/viewJobPostings", method = RequestMethod.GET)
	public String viewJobPostings(Model model, @ModelAttribute User user) {
		List<Job> jobs = jobDAO.findAll();
		ListIterator<Job> jobsListIter = jobs.listIterator();
		Set<JobApplication> jobApps = userDAO.read(user.getId()).getJobApplications();
		Iterator<JobApplication> jobAppsIter = jobApps.iterator();
		
		while(jobsListIter.hasNext()) {
			Job job = jobsListIter.next();
			if(!job.getStatus().equals(JobStatus.ACTIVE))
				jobsListIter.remove();
		}
		
		while(jobAppsIter.hasNext()) {
			JobApplication jobApp = jobAppsIter.next();
			if(jobs.contains(jobApp.getJob()))
				jobs.remove(jobApp.getJob());
		}
		
		model.addAttribute("jobs", jobs);
		return "view_all_jobs_applicant";
	}
	
	@RequestMapping(value = "/applicantViewJob", method = RequestMethod.GET)
	public String viewJobDetails(Model model, @RequestParam String jobId) {
		if(jobId == null || jobId.equals("")) {
			model.addAttribute("errorMsg", "No job input provided.");
			return "view_all_jobs_applicant";
		}
		else {
			long id = Long.parseLong(jobId);
			Job job = jobDAO.read(id);
			
			if(job == null) {
				model.addAttribute("errorMsg", "Given job does not exist");
				return "view_all_jobs_applicant";
			}
			else {
				model.addAttribute("job", job);
				return "view_job_post";
			}
		}
	}
	
	@RequestMapping(value = "/applicantViewApplication", method = RequestMethod.GET)
	public String viewJobDetails(Model model,@ModelAttribute User user, @RequestParam String jobId, @RequestParam String applicationStatus) {
		if(jobId == null || jobId.equals("")) {
			model.addAttribute("errorMsg", "No job input provided.");
			return "view_all_jobs_applicant";
		}
		else {
			long id = Long.parseLong(jobId);
			Job job = jobDAO.read(id);
			
			if(job == null) {
				model.addAttribute("errorMsg", "Given job application does not exist");
				return "view_all_jobs_applicant";
			}
			else {
				model.addAttribute("job", job);
				model.addAttribute("applicationStatus", applicationStatus);
				return "view_job_application";
			}
		}
	}
	
	
	
	@RequestMapping(value = "/applicantViewJobApps", method = RequestMethod.GET)
	public String viewJobApplications(Model model, @ModelAttribute User user) {
		User applicant = userDAO.read(user.getId());
		Set<JobApplication> jobApplications = applicant.getJobApplications();
		
		model.addAttribute("jobApps", jobApplications);
		
		return "view_applied_jobs";
	}
	
	@RequestMapping(value = "/applicantViewInterviews", method = RequestMethod.GET)
	public String viewApplicantInterviews(Model model, @ModelAttribute User user) {
		User applicant = userDAO.read(user.getId());
		List<Interview> interviews = interviewDAO.findUserInterviews(applicant);
		
		model.addAttribute("interviews", interviews);
		
		return "view_all_interviews"; //this might change later as we get a new interview jsp page created for all users - Sammy
	}
	
	@RequestMapping(value = "/applyForJob", method = RequestMethod.POST)
	public String applyForJob(Model model, @ModelAttribute User user, @RequestParam String jobId) {
		if(jobId == null || jobId.equals("")) {
			model.addAttribute("errorMsg", "No job provided to apply for");
			return viewJobPostings(model, user);
		}
		else {
			long id = Long.parseLong(jobId);
			User applicant = userDAO.read(user.getId());
			Job job = jobDAO.read(id);
			
			if(job == null) {
				model.addAttribute("errorMsg", "Job does not exist");
				return viewJobPostings(model, user);
			}
			
			if((user.getApplicantProfile().getAddress()==null || user.getApplicantProfile().getPrimaryPhone()==null) && user.getApplicantProfile().getResume()==null){
				model.addAttribute("errorMsg","You cannot apply for a job until you have finished your profile or uploaded your resume.");
				return viewJobPostings(model, user);
			}
			
			Set<JobApplication> appliedFor = user.getJobApplications();
			for(JobApplication ja: appliedFor){
				if(ja.getJob().equals(job)){
					model.addAttribute("errorMsg", "You cannot apply for a job twice");
					return viewJobPostings(model, user);
				}
			}
			JobApplication jobApp = new JobApplication(applicant, job);
			user.getJobApplications().add(jobApp);
			job.getJobApplications().add(jobApp);
			jobApp = jobAppDAO.create(jobApp);
				
			if(jobApp == null) {
				model.addAttribute("errorMsg", "Job application cannot be created.");
				return viewJobPostings(model, user);
			}
				
			model.addAttribute("successMsg", "Congratulations! You have successfully applied for: " + job.getTitle() + "!");
			return viewJobPostings(model, user);
		}
	}

}
